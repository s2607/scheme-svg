;;((new-graph black 2 "a.svg") r a b) ;; r returns an x,y pair for t	
(define (write-svg port graphics)
  (write-string "<?xml version=\"1.0\"?> <svg xmlns=\"http://www.w3.org/2000/svg\">" port) (graphics port) (write-string "</svg>" port))
(define (write-line x1 y1 x2 y2 color width port)
  (write-string "<line x1=\"" port) (write x1 port) (write-string "\"" port) (newline port)
  (write-string "x2=\"" port) (write x2 port) (write-string "\"" port) (newline port)
  (write-string "y2=\"" port) (write y2 port) (write-string "\"" port) (newline port)
  (write-string "y1=\"" port) (write y1 port) (write-string "\"" port) (newline port)
  (write-string "stroke-width=\"" port) (write width port) (write-string "\"" port)
  (write-string "stroke\"" port) (write-string color port) (write-string "\"" port)
  (write-string "</line>" port)  (newline port))
(define (write-lines color width lines port)
  (if (not (null? lines))
    (write-line (caar lines) (cadar lines) (caddar lines) (cadddar lines) color width port)
    (write-lines color width (cdr lines) port)))
(define (add-line lines x1 y1 x2 y2)
 (append (cons (list x1 y1 x2 y2) '()) lines))
(define (new-graph color width file)
  (let ((port (open-output-file file)))
    ((lambda (c ta tb)
       (define (curvi curve a b lines t)
	 (if (= t b) lines
	   (curvi curve a b (add-line lines (car (curve t)) (cdar (curve t)) (car (curve (+ t 1))) (cdar (curve (+ t 1)))))))
       (write-svg (lambda (p) (write-lines color width (curvi c ta tb '() ta)p) port))))))
